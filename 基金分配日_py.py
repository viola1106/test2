{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPN5E0v30934K4uoJyPKfJ4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/viola1106/test2/blob/master/%E5%9F%BA%E9%87%91%E5%88%86%E9%85%8D%E6%97%A5_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "poOcamEqXa__"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1JT6WM0kXIod"
      },
      "outputs": [],
      "source": [
        "import re\n",
        "from configparser import ConfigParser\n",
        "from datetime import datetime\n",
        "from glob import glob\n",
        "from os import getcwd\n",
        "from os import makedirs\n",
        "from os.path import basename\n",
        "from os.path import isdir\n",
        "\n",
        "import aspose.pdf as ap  # 轉檔:PDF to EXCEL\n",
        "import pandas as pd\n",
        "import pdfplumber  # 讀pdf表格\n",
        "import urllib.request  # URL轉PDF用\n",
        "from psycopg2 import connect\n",
        "\n",
        "from DateTimeWork import DateTimeTransformer as date_string_work\n",
        "from PasswordKey import ps_key, user_id\n",
        "from WriteSample import ExcelWriter as ew\n",
        "\n",
        "\n",
        "main_dir = '\\\\'.join(getcwd().split('\\\\')[:-1]) # 專案資料夾路徑\n",
        "\n",
        "ini_file = f\"{main_dir}\\\\pm\\\\2CFNDN.ini\" # INI 檔案\n",
        "ini = ConfigParser()\n",
        "ini.read(ini_file, encoding='utf-8')\n",
        "\n",
        "kw_dic = pd.read_excel(f\"{main_dir}\\{ini['path']['keyword']}\", sheet_name=None, header=1, dtype=str)  # 關鍵字檔案\n",
        "standard = pd.read_excel(f\"{main_dir}\\{ini['path']['standard']}\", sheet_name=None, header=0, dtype=str)  # 標準檔\n",
        "\n",
        "# SQL連線:global\n",
        "conn = connect(\n",
        "database=ini['setting']['database'],\n",
        "user=user_id,\n",
        "password=ps_key,\n",
        "host=ini['setting']['host'],\n",
        "port=ini['setting']['port'],\n",
        ")\n",
        "\n",
        "# 檔案存放資料夾aka資料來源\n",
        "input_path = f\"{main_dir}\\{ini['path']['input']}\"\n",
        "# RPA檔案輸出aka表準檔輸出路徑\n",
        "output_path = f\"{main_dir}\\{ini['path']['output']}\"\n",
        "\n",
        "# 新增一個資料夾file，存放pdf&excel檔案，在input資料夾，方便之後刪除檔案\n",
        "input_file_path = input_path + \"\\\\file\"\n",
        "if isdir(input_file_path):\n",
        "    input_path = input_path + \"\\\\file\"\n",
        "    pass\n",
        "else:\n",
        "    makedirs(input_path + \"\\\\file\")  # 新增資料夾\n",
        "    input_path = input_path + \"\\\\file\"\n",
        "\n",
        "\n",
        "today = datetime.today().strftime('%Y-%m-%d')  # 系統日期\n",
        "hr = datetime.today().strftime('%H')  # 系統時間，單位:小時\n",
        "\n",
        "date_format_li = [\n",
        "'(\\d{3,4}|(民國)?\\D{3})[年年]度', # 111年度 | 2022年度 | 一一〇年度 | 民國一一〇年度\n",
        "'\\d{3,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}', # 111.12.31 | 110/12/31 | 110-12-31\n",
        "'(\\d{3,4}|\\D{3,4})[年年](\\d{1,2}|\\D{1,2})月(\\d{1,2}|\\D{1,3})日' # 2021年12月31日 | 110年6月1日 | 一一〇年六月三十日 | 二〇二〇年七月八日\n",
        "]\n",
        "\n",
        "date_pat = re.compile('|'.join(date_format_li))\n",
        "\n",
        "\n",
        "\"\"\"---------------------------------------------------------data processing---------------------------------------------------------\"\"\"\n",
        "class RpaWorker:\n",
        "    @classmethod\n",
        "    def __init__(self, pdf_file, excel_file_nm):\n",
        "        self.pdffile = pdf_file\n",
        "        self.excelfile = excel_file_nm\n",
        "        self.data = {}\n",
        "        self.data['origin'] = pd.DataFrame()  # 原始excel的資料\n",
        "        self.data['data'] = None  # 整理後的資料\n",
        "        self.data['type'] = ''  #基金類型: general / money\n",
        "        self.data['sheet_name'] = ''  # 標準檔的工作表名稱\n",
        "        self.data['sub_fund_fg'] = False  # 有無下屬分類基金，預設無(False)\n",
        "        self.data['sub_data'] = {}  # 下屬基金的資料\n",
        "        self.data['pdf_data'] = None  # 用pdfplumber讀取的資料\n",
        "\n",
        "    @classmethod\n",
        "    def read_excel(self):\n",
        "        \"\"\"讀取excel檔案並轉換\n",
        "        整合所有的工作表到一個dataframe\n",
        "        \"\"\"\n",
        "\n",
        "        # 讀取excel檔\n",
        "        self.df = pd.read_excel(self.excelfile, sheet_name=None, header=None, dtype=str)  # 讀取file\n",
        "\n",
        "        self.df_keys_li = list(self.df.keys())  # 取所有的工作表名稱\n",
        "\n",
        "        # self.data['origin'] = pd.DataFrame()  # 合併成一個dataframe\n",
        "        for sheet in self.df_keys_li:\n",
        "            self.data['origin'] = pd.concat([self.data['origin'], self.df[sheet]], ignore_index=True).fillna('')\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def read_pdf(self):\n",
        "        \"\"\"讀取pdf檔的表格:模組pdfplumber\n",
        "        PDF file path:main_dir\\input\\\n",
        "        \"\"\"\n",
        "\n",
        "        pdf = pdfplumber.open(pdf_file)\n",
        "        text_p = ''\n",
        "        table_p = []\n",
        "\n",
        "        for p in range(len(pdf.pages)):\n",
        "            page = pdf.pages[p]\n",
        "            page.extract_table()\n",
        "            text_p += page.extract_text()\n",
        "            if page.extract_table() is not None:\n",
        "                table_p += page.extract_table()  # 讀取PDF的table(表格)\n",
        "\n",
        "        self.data['pdf_data'] = pd.DataFrame(table_p).fillna('')\n",
        "        pdf.close()  # 把pdf檔關起來\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def define_data(self):\n",
        "        \"\"\"資料表格整理\n",
        "        1.判斷資料: self.data['type'] = general / money\n",
        "        2.給予工作表名稱: self.data['sheet_name']\n",
        "        3.抓取所有欄位所需資料: self.data['data']\n",
        "        4.寫進標準檔欄位名稱: self.data['data'].columns\n",
        "        \"\"\"\n",
        "\n",
        "        self.data['origin'].replace(to_replace='\\s+', value='', regex=True, inplace=True)\n",
        "        self.data['origin'].replace(regex='\\n', value='', inplace=True)\n",
        "\n",
        "        # 判斷類型&工作表\n",
        "        kw_dic['sheet_name']['sheet_name'].dropna().tolist()\n",
        "        if re.search(r'货币', ''.join([''.join(li) for li in self.data['origin'].iloc[:3, :].values.tolist()])) is not None:\n",
        "            self.data['type'] = 'money'\n",
        "            self.data['sheet_name'] = kw_dic['sheet_name'].loc[(kw_dic['sheet_name']['type'] == 'money'), 'sheet_name'].values.tolist()[0]\n",
        "        else:\n",
        "            self.data['type'] = 'general'\n",
        "            self.data['sheet_name'] = kw_dic['sheet_name'].loc[(kw_dic['sheet_name']['type'] == 'general'), 'sheet_name'].values.tolist()[0]\n",
        "            # 確認有無下屬基金，如果有FG改True\n",
        "            if False in [self.data['origin'][col_nm].apply(lambda kw: re.search(r'|'.join(kw_dic['general']['sub_fund'].dropna().tolist()), kw) is None).all() for col_nm in self.data['origin'].columns]:\n",
        "                self.data['sub_fund_fg'] = True\n",
        "\n",
        "        self.data['data'] = pd.read_excel(f\"{main_dir}\\{ini['path']['standard']}\", self.data['sheet_name']).dropna()  # data帶入標準檔欄位名稱\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def format_pdf_data(self):\n",
        "        \"\"\"整理用pdfplumber模組讀取的資料\n",
        "        1.依基金類型帶入各自的關鍵字欄位名稱\n",
        "        2.注意下屬基金\n",
        "        \"\"\"\n",
        "\n",
        "        self.data['pdf_data'].replace(to_replace='\\s+', value='', regex=True, inplace=True)\n",
        "        self.data['pdf_data'].replace(regex='\\n', value='', inplace=True)\n",
        "\n",
        "        # 依據基金類型判斷關鍵字表頭\n",
        "        # 對照關鍵字檔基金名稱，帶入dict{'標準檔表頭':[資料list]}\n",
        "        data_dict = {}\n",
        "        for nm in self.data['data'].columns.tolist():\n",
        "            data_dict[nm] = []\n",
        "\n",
        "        sub_data_dict = {}  # 暫存下屬基金資料\n",
        "\n",
        "        # 一般類型基金\n",
        "        if self.data['type'] == 'general':\n",
        "            # 擷取資料:分為\"再投資\" 與其他欄位\n",
        "            for idx, row in self.data['pdf_data'].iterrows():\n",
        "                for kw_dic_idx in kw_dic['general'].index:\n",
        "                    # 基本資料欄位:注意下屬基金\n",
        "                    if re.search(kw_dic['general'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['pdf_data'].loc[idx, :].values.tolist())) is not None:\n",
        "                        if data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                            data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] = self.data['pdf_data'].loc[idx, :].values.tolist()\n",
        "                    # 若有下屬基金\n",
        "                    if self.data['sub_fund_fg'] == True:\n",
        "                        # if re.search(r'|'.join(kw_dic['general']['sub_fund'].dropna().tolist()), ''.join(self.data['pdf_data'].loc[idx, :].values.tolist())) is not None:  # 若有\"下屬\"\n",
        "                        for sub_idx in range(len(kw_dic['general']['sub_fund_col'].dropna().tolist())):\n",
        "                            sub_col = re.search(kw_dic['general'].loc[sub_idx, 'sub_fund_col'], ''.join(self.data['pdf_data'].loc[idx, :].values.tolist()))\n",
        "                            if sub_col is not None:  # 表頭名稱\n",
        "                                sub_data_dict[kw_dic['general'].loc[sub_idx, 'sub_fund_col']] = self.data['pdf_data'].loc[idx, :].values.tolist()\n",
        "\n",
        "            if self.data['sub_data'] == {}:\n",
        "                for key, value in sub_data_dict.items():\n",
        "                    for kw_dic_idx in kw_dic['general'].index:\n",
        "                        if key == kw_dic['general'].loc[kw_dic_idx, 'sub_fund_col']:\n",
        "                            self.data['sub_data'][kw_dic['general'].loc[kw_dic_idx, 'sub_standard_col']] = list(value)\n",
        "\n",
        "        # 貨幣類型基金\n",
        "        elif self.data['type'] == 'money':\n",
        "            for idx in self.data['pdf_data'].index:\n",
        "                for kw_dic_idx in kw_dic['money'].index:\n",
        "                    #\n",
        "                    if re.search(kw_dic['money'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['pdf_data'].loc[idx, :].values.tolist())) is not None:\n",
        "                        if data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                            data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] = self.data['pdf_data'].loc[idx, :].values.tolist()\n",
        "\n",
        "        self.data['data_dict'] = data_dict\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def retrieve_data(self):\n",
        "        \"\"\"擷取excel的資料:先整理表格\n",
        "        * 如果data_dict已經有資料了則不做 *\n",
        "        1.讀取檔案的dataframe\n",
        "        2.抓取需要的資料: 以row逐列判斷\n",
        "        3.公告日、基金名稱、基金碼可以兩表一起處理\n",
        "        4.其餘欄位個別處理:\n",
        "            日期部分:找到第一個就是\n",
        "        5.再投資: 另外處理，需確認前後內容\n",
        "        \"\"\"\n",
        "\n",
        "        # dict{'標準檔表頭':[資料list]}，已經有先處理pdf表格資料，如果data_dict無資料，再帶入excel擷取到的資料\n",
        "        data_dict = {}\n",
        "        for col_nm, col_val in self.data['data_dict'].items():\n",
        "            data_dict[col_nm] = col_val\n",
        "\n",
        "        # 欄位0是空的的時候付值第1欄的內容:公告日期之後是基金表格，如果沒在第0欄，則表示表格資料位移\n",
        "        for idx in self.data['origin'].index:\n",
        "            if '公告送出日期' in self.data['origin'].iloc[idx, 0]:\n",
        "                if self.data['origin'].iloc[idx+1, 0] == '' and self.data['origin'].iloc[idx+1, 1] != '':\n",
        "                    self.data['origin'].iloc[idx+1:, 0] = self.data['origin'].iloc[idx+1:, 1]\n",
        "\n",
        "        # 一般類型基金\n",
        "        if self.data['type'] == 'general':\n",
        "            # 擷取資料:分為\"再投資\" 與其他欄位\n",
        "            for idx, row in self.data['origin'].iterrows():\n",
        "                for kw_dic_idx in kw_dic['general'].index:\n",
        "\n",
        "                    # 非再投資的欄位:注意下屬基金\n",
        "                    if '再投資' not in kw_dic['general'].loc[kw_dic_idx, 'standard_col']:\n",
        "                        if re.search(kw_dic['general'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['origin'].loc[idx, :].values.tolist())) is not None:\n",
        "                            if data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                                data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] = self.data['origin'].loc[idx, :].values.tolist()\n",
        "\n",
        "                        # 若有下屬基金\n",
        "                        if self.data['sub_fund_fg'] == True:\n",
        "                            sub_data_dict = {}  # 暫存下屬基金資料\n",
        "                            if re.search(r'|'.join(kw_dic['general']['sub_fund'].dropna().tolist()), ''.join(self.data['origin'].loc[idx, :].values.tolist())) is not None:  # 有\"下屬\"\n",
        "                                sub_col = re.search(r'|'.join(kw_dic['general']['sub_fund_col'].dropna().tolist()), ''.join(self.data['origin'].loc[idx, :].values.tolist()))\n",
        "                                if sub_col is not None:  # 表頭名稱\n",
        "                                    sub_col_nm = sub_col.group()\n",
        "                                    sub_data_dict[sub_col_nm] = self.data['origin'].loc[idx, :].values.tolist()\n",
        "                                    # 確認下屬基金資料都有抓到(避免斷行問題:名稱太長、數值位移)\n",
        "                                    # 基金簡稱\n",
        "                                    if sub_col_nm == '基金简称' and self.data['origin'].loc[idx+1, 0] == '':\n",
        "                                        sub_data_dict[sub_col_nm] = (self.data['origin'].loc[idx, :] + self.data['origin'].loc[idx+1, :]).values.tolist()\n",
        "\n",
        "                                    # 分配利潤\n",
        "                                    if sub_col_nm == '可供分配利润':\n",
        "                                        sub_data_dict[sub_col_nm] = (self.data['origin'].loc[idx-1, :] + self.data['origin'].loc[idx, :]).values.tolist()\n",
        "\n",
        "                            if self.data['sub_data'] == {}:\n",
        "                                for key, value in sub_data_dict.items():\n",
        "                                    for kw_dic_idx in kw_dic['general'].index:\n",
        "                                        if key == kw_dic['general'].loc[kw_dic_idx, 'sub_fund_col']:\n",
        "                                            self.data['sub_data'][kw_dic['general'].loc[kw_dic_idx, 'sub_standard_col']] = list(value)\n",
        "\n",
        "                    # 再投資欄位\n",
        "                    if kw_dic['general'].loc[kw_dic_idx, 'standard_col'] == '再投資發放日':\n",
        "                        if re.search(kw_dic['general'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['origin'].loc[idx, :].values.tolist())) is not None:\n",
        "                            if data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                                # 搜尋前後4列第0欄是空值的內容: idx-4 ~ idx+4\n",
        "                                chk_li = [chk_idx for chk_idx in range(idx-4, idx+5)]\n",
        "                                chk_blank_li = [chk for chk in chk_li if self.data['origin'].iloc[chk, 0] == '']\n",
        "                                if chk_blank_li == []:\n",
        "                                    continue\n",
        "                                data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] = self.data['origin'].iloc[min(chk_blank_li):max(chk_blank_li)+1, 1:].values.tolist()\n",
        "                                # 把雙重list轉成一層\n",
        "                                if type(data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']][0]) == list:\n",
        "                                    temp_li = [''.join(li) for li in data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']]]\n",
        "                                    data_dict[kw_dic['general'].loc[kw_dic_idx, 'standard_col']] = temp_li\n",
        "\n",
        "        # 貨幣類型基金\n",
        "        elif self.data['type'] == 'money':\n",
        "            for idx in self.data['origin'].index:\n",
        "                for kw_dic_idx in kw_dic['money'].index:\n",
        "                    # 非再投資的欄位\n",
        "                    if '再投資' not in kw_dic['money'].loc[kw_dic_idx, 'standard_col']:\n",
        "                        if re.search(kw_dic['money'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['origin'].loc[idx, :].values.tolist())) is not None:\n",
        "                            if data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                                data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] = self.data['origin'].loc[idx, :].values.tolist()\n",
        "\n",
        "                    # 再投資欄位\n",
        "                    if kw_dic['money'].loc[kw_dic_idx, 'standard_col'] == '再投資發放日':\n",
        "                        if re.search(kw_dic['money'].loc[kw_dic_idx, 'fund_col'], ''.join(self.data['origin'].loc[idx, :].values.tolist())) is not None:\n",
        "                            if data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] == []:  # 如果是空值\n",
        "                                # 確認表頭前後列是否為空值\n",
        "                                if self.data['origin'].iloc[idx-1, 0] != '' and self.data['origin'].iloc[idx+1, 0] != '' :\n",
        "                                    data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] = self.data['origin'].loc[idx, :].values.tolist()\n",
        "                                elif self.data['origin'].iloc[idx-1, 0] != '' or self.data['origin'].iloc[idx+1, 0] != '' :\n",
        "                                    data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] = self.data['origin'].loc[idx-1:idx+1, :].values.tolist()\n",
        "                                    # 把雙重list轉成一層\n",
        "                                    if type(data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']][0]) == list:\n",
        "                                        temp_li = [''.join(li) for li in data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']]]\n",
        "                                        data_dict[kw_dic['money'].loc[kw_dic_idx, 'standard_col']] = temp_li\n",
        "\n",
        "        self.data['data_dict'] = data_dict\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def format_data(self):\n",
        "        \"\"\"整理資料\n",
        "        1.將資料從list中取出\n",
        "        2.日期資料統一轉換格式:YYYYMMDD\n",
        "        3.份額、幣別固定\n",
        "        4.下屬基金要append到主基金之後，日期資料等於主基金的日期\n",
        "        \"\"\"\n",
        "\n",
        "        sub_dict = {}  # 暫存整理過的下屬基金資料\n",
        "        for col_nm in ['基金碼', '基金名稱', '可供分配利潤', '股息']:  # 下屬基金:4組資料，每組都有2筆\n",
        "            sub_dict[col_nm] = []\n",
        "\n",
        "        # 依欄位整理資料並帶入\n",
        "        for key, value in self.data['data_dict'].items():\n",
        "            if value == []:\n",
        "                continue\n",
        "            if key in ['公告日', '收益分配基準日', '登記日', '收益集中支付日']:\n",
        "                for val in value:\n",
        "                    if date_pat.search(val) is not None:\n",
        "                        self.data['data'].loc[0, key] = date_pat.search(val).group()\n",
        "                    elif date_pat.search(''.join(value)) is not None:\n",
        "                        self.data['data'].loc[0, key] = date_pat.search(''.join(value)).group()\n",
        "                        break\n",
        "\n",
        "            elif key in ['分配年度']:\n",
        "                for val in value:\n",
        "                    if re.search(r'[0-9]{4}年', val) is not None:\n",
        "                        self.data['data'].loc[0, key] = re.search(r'[0-9]{4}', val).group()  # 只留西元年YYYY\n",
        "\n",
        "            elif key in ['基金碼', '基金名稱', '可供分配利潤', '股息']:\n",
        "                # 沒有下屬基金\n",
        "                if self.data['sub_fund_fg'] == False:\n",
        "                    for val in value:\n",
        "                        if val != '' and re.search(r'|'.join(['基金碼', '基金名稱', '可供分配利潤', '股息']), val) is None:\n",
        "                            self.data['data'].loc[0, key] = val\n",
        "\n",
        "                # 若有下屬基金\n",
        "                elif self.data['sub_fund_fg'] == True:\n",
        "                    self.data['data'].fillna('', inplace=True)\n",
        "                    # 找相對應的sub資料\n",
        "                    for sub_key in self.data['sub_data'].keys():\n",
        "                        if key == sub_key and sub_dict[key] == []:\n",
        "                            # 整理下屬基金資料\n",
        "                            for val in self.data['sub_data'][key]:\n",
        "                                if val != '' and re.search(r'|'.join(kw_dic['general']['sub_fund_col'].dropna().tolist()+['下属']), val) is None:\n",
        "                                    sub_dict[key].append(val)\n",
        "                    # 將sub資料放入data\n",
        "                    for sub_key, sub_val in sub_dict.items():\n",
        "                        if key == sub_key and sub_val != []:  # and self.data['data'].loc[0, sub_key] == '' and self.data['data'].loc[1, sub_key] == ''\n",
        "                            for num in range(len(sub_val)):\n",
        "                                self.data['data'].loc[num, sub_key] = sub_val[num]\n",
        "                                # self.data['data'].loc[1, sub_key] = sub_val[1]\n",
        "\n",
        "            elif key in ['除息日(場外)', '現金發放日(場外)']:\n",
        "                for key_date in ['除息日(場外)', '現金發放日(場外)']:\n",
        "                    col_date = key_date[:-4]  # str:除息日/現金發放日\n",
        "                    date_fg = False  # 判斷for loop有沒有找到資料\n",
        "                    for val in value:\n",
        "                        if date_pat.search(val) is not None:\n",
        "                            # 若\"無\"分場內、場外\n",
        "                            if re.search(r'场外|场内', ''.join(self.data['data_dict'][key])) is None:\n",
        "                                self.data['data'].loc[0, key] = date_pat.search(val).group()\n",
        "                                date_fg = True\n",
        "                            # 若\"有\"分場內、場外\n",
        "                            elif re.search(r'场外', ''.join(self.data['data_dict'][key])) is not None:  # 有\"場外\"\n",
        "                                self.data['data'].loc[0, col_date+'(場外)'] =  date_pat.search(val).group()\n",
        "                                date_fg = True\n",
        "                            elif re.search(r'场内', ''.join(self.data['data_dict'][key])) is not None:  # 有\"場內\"\n",
        "                                self.data['data'].loc[0, col_date+'(場內)'] = date_pat.search(val).group()\n",
        "                                date_fg = True\n",
        "                    if date_fg == False:  # 如果for loop沒有資料，則有可能資料為文章式的無法用list找日期，則合併所有資料找日期\n",
        "                        if date_pat.search(''.join(value)) is not None:\n",
        "                            # 若\"無\"分場內、場外\n",
        "                            if re.search(r'场外|场内', ''.join(self.data['data_dict'][key])) is None:\n",
        "                                self.data['data'].loc[0, key] = date_pat.search(''.join(value)).group()\n",
        "\n",
        "                            # 若\"有\"分場內、場外\n",
        "                            elif re.search(r'场外', ''.join(self.data['data_dict'][key])) is not None and re.search(r'场内', ''.join(self.data['data_dict'][key])) is None:  # 有\"場外\"沒\"場內\"\n",
        "                                self.data['data'].loc[0, col_date+'(場外)'] =  date_pat.search(''.join(value)).group()\n",
        "\n",
        "                            elif re.search(r'场内', ''.join(self.data['data_dict'][key])) is not None:  # 有\"場內\"\n",
        "                                self.data['data'].loc[0, col_date+'(場內)'] = '-'.join([num for num in date_pat.findall(''.join(value))[0] if num != ''])\n",
        "                                self.data['data'].loc[0, col_date+'(場外)'] = '-'.join([num for num in date_pat.findall(''.join(value))[1] if num != ''])\n",
        "\n",
        "            elif key in ['再投資發放日']:\n",
        "                if date_pat.search(''.join(self.data['data_dict']['再投資發放日'])) is not None:\n",
        "                    self.data['data'].loc[0, '再投資發放日'] = date_pat.search(''.join(self.data['data_dict']['再投資發放日'])).group()\n",
        "                # 確認有無贖回日期\n",
        "                if re.search(r'赎回', ''.join(self.data['data_dict']['再投資發放日'])) is not None:\n",
        "                    redeem_beg = re.search(r'赎回', ''.join(self.data['data_dict']['再投資發放日'])).span()[0]\n",
        "                    if date_pat.search(''.join(self.data['data_dict']['再投資發放日'])[redeem_beg:]) is not None:\n",
        "                        self.data['data'].loc[0, '再投資贖回日'] = date_pat.search(''.join(self.data['data_dict']['再投資發放日'])[redeem_beg:]).group()\n",
        "\n",
        "            elif key in ['收益累積期間(起)']:\n",
        "                if date_pat.search(''.join(self.data['data_dict']['收益累積期間(起)'])) is not None:\n",
        "                    mid_word_li = [mid_word for mid_word in kw_dic['money']['mid_word'].dropna().values.tolist() if re.split(mid_word, ''.join(self.data['data_dict']['收益累積期間(起)'])) !=[]]\n",
        "                    date_li = re.split(mid_word_li[0], ''.join(self.data['data_dict']['收益累積期間(起)']))\n",
        "                    self.data['data'].loc[0, '收益累積期間(起)'] = date_pat.search(date_li[0]).group()\n",
        "                    if date_pat.search(date_li[1]) is not None:\n",
        "                        self.data['data'].loc[0, '收益累積期間(迄)'] = date_pat.search(date_li[1]).group()\n",
        "\n",
        "            # 份額固定10，幣別固定CNY\n",
        "            if self.data['type'] == 'general':\n",
        "                self.data['data'].loc[0, '份額'] = 10\n",
        "                self.data['data'].loc[0, '幣別'] = 'CNY'\n",
        "\n",
        "            self.data['data'].fillna('', inplace=True)\n",
        "\n",
        "            if self.data['sub_fund_fg'] == True:  # 若有下屬基金，日期等其他資料同主基金\n",
        "                for num in range(1, len(self.data['data'])):\n",
        "                    for col_nm in self.data['data'].columns:\n",
        "                        if col_nm not in ['基金碼', '基金名稱', '可供分配利潤', '股息']:\n",
        "                            if self.data['data'].loc[num, col_nm] == '':\n",
        "                                self.data['data'].loc[num, col_nm] = self.data['data'].loc[0, col_nm]\n",
        "\n",
        "        self.data['data'].replace(['（', '）'], ['(', ')'], regex=True, inplace=True)  # 全形改半形\n",
        "\n",
        "        # 依欄位整理資料格式\n",
        "        for col_nm in self.data['data'].columns:\n",
        "            self.data['data'][col_nm] = ColWorker(col_nm, self.data['data'][col_nm]).work()\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def work(self):\n",
        "        \"\"\"執行RpaWorker的function\n",
        "        1.先讀取pdf, excel檔案: read_excel、read_pdf\n",
        "        2.判斷基金類型和工作表名稱\n",
        "        3.先對pdf表格處理資料: format_pdf_data\n",
        "        4.pdf表格沒有擷取到資料的話，再從excel擷取資料: retrieve_data\n",
        "        5.整理已擷取的資料放進data: format_data\n",
        "        \"\"\"\n",
        "\n",
        "        self.read_excel()  # 讀取excel檔案\n",
        "        self.read_pdf()  # 讀取pdf檔表格\n",
        "        self.define_data()  # 判斷基金類型和工作表名稱\n",
        "        self.format_pdf_data()  # 整理pdf檔的表格資料\n",
        "        self.retrieve_data()  # 從excel檔擷取所需資料:表格內沒有的資料補齊\n",
        "        self.format_data()  # 整理資料\n",
        "\n",
        "        return\n",
        "\n",
        "\n",
        "# 各別欄位處裡\n",
        "class ColWorker:\n",
        "    @classmethod\n",
        "    def __init__(self, col_nm, col_li):\n",
        "        \"\"\"對各欄位處理\n",
        "        col_nm : str\n",
        "            用作後續處理(work)時判斷依據\n",
        "        col_li : list\n",
        "            欄位內容轉成list型態\n",
        "        \"\"\"\n",
        "        self.col_nm = col_nm\n",
        "        if type(col_li) == list:\n",
        "            self.col_li = col_li\n",
        "        else:\n",
        "            self.col_li = col_li.values.tolist()\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def date_col(self):\n",
        "        \"\"\"對日期欄位處理:輸出8碼日期: YYYYMMDD\n",
        "        \"\"\"\n",
        "\n",
        "        for idx, cell in enumerate(self.col_li):\n",
        "            if cell == '':\n",
        "                continue\n",
        "\n",
        "            elif '-' in cell:  # 用-連接日期的處理\n",
        "                cell_li = re.split('-', cell)\n",
        "                for num in range(len(cell_li)):\n",
        "                    if len(cell_li[num]) < 2:\n",
        "                        cell_li = '0' + cell_li[num]\n",
        "                cell = ''.join(cell_li)\n",
        "\n",
        "            elif '－' in cell:  # 用－(全形)連接日期的處理\n",
        "                cell_li = re.split('－', cell)\n",
        "                for num in range(len(cell_li)):\n",
        "                    if len(cell_li[num]) < 2:\n",
        "                        cell_li = '0' + cell_li[num]\n",
        "                cell = ''.join(cell_li)\n",
        "\n",
        "            else:  # 其他則一併套用已寫好的日期套件\n",
        "                cell = date_string_work(cell).work()\n",
        "\n",
        "            self.col_li[idx] = cell\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def subject_col(self):\n",
        "        \"\"\"基金名稱:出現(以下...)要拿掉，但名稱(FOF)要留著\n",
        "        \"\"\"\n",
        "        for idx, cell in enumerate(self.col_li):\n",
        "            if cell == '':\n",
        "                continue\n",
        "\n",
        "            if re.search(r'\\(以下.*\\)', cell) is not None:\n",
        "                word = re.search(r'\\(以下.*\\)', cell).group()\n",
        "                self.col_li[idx] = cell.replace(word, '')\n",
        "\n",
        "        return\n",
        "\n",
        "    @classmethod\n",
        "    def work(self):\n",
        "        \"\"\"處理流程，依欄位名稱判斷該進行何種處理\n",
        "        Return:\n",
        "        col_li : list\n",
        "            處理後欄位內容\n",
        "        \"\"\"\n",
        "\n",
        "        if '日' in self.col_nm or '期間' in self.col_nm:\n",
        "            self.date_col()\n",
        "\n",
        "        elif self.col_nm in ['基金名稱']:\n",
        "            self.subject_col()\n",
        "\n",
        "        return self.col_li\n",
        "\n",
        "\"\"\"---------------------------------------------------output function--------------------------------------------\"\"\"\n",
        "def output_data_file(result_data):\n",
        "    \"\"\"輸出整理好的資料\n",
        "    輸出路徑:ini['path']['output']\n",
        "    輸出檔名: cinfotxcnintyyyymmdd_hr.xls\n",
        "    \"\"\"\n",
        "\n",
        "    date = today.replace('-', '')\n",
        "    file_nm = f\"cinfotxcnint{date}_{hr}.xlsx\"\n",
        "\n",
        "    excel = ew(f\"{main_dir}\\{ini['path']['standard']}\") # 開啟檔案(標準檔)\n",
        "\n",
        "    # 依工作表名稱寫入資料、檢查上色，並執行輸出\n",
        "    for sheet_name in result_data.keys():\n",
        "        if result_data[sheet_name].empty == True:\n",
        "            continue\n",
        "\n",
        "        # 寫入資料\n",
        "        excel.write_data(result_data[sheet_name].fillna('').values.tolist(), sheet=sheet_name)\n",
        "\n",
        "    excel.save_as_file(output_path + f'\\\\{file_nm}') # 輸出\n",
        "\n",
        "    return\n",
        "\n",
        "def output_list_file(rpa_list_data):\n",
        "    \"\"\"輸出已處理的資料清單\n",
        "    \"\"\"\n",
        "\n",
        "    # 檔案輸出路徑: output\n",
        "    rpa_list_path = f\"{main_dir}\\{ini['path']['rpa_list']}\"\n",
        "\n",
        "    # EXCEL\n",
        "    rpa_list_data = pd.DataFrame(rpa_list_data, columns=['today', 'fund_id', 'pdf_file', 'RPA', 'MSG']).sort_values('today', ascending=False).values.tolist()\n",
        "\n",
        "    excel = ew(f\"{main_dir}\\{ini['path']['rpa_list']}\")  # 開啟檔案\n",
        "    excel.write_data(rpa_list_data)  # 寫入資料\n",
        "    excel.save_as_file(rpa_list_path)  # 儲存檔案\n",
        "\n",
        "    return\n",
        "\n",
        "\n",
        "\"\"\"---------------------------------------------------find and read file--------------------------------------------\"\"\"\n",
        "def convert_pdf_to_excel(pdf_file):\n",
        "    \"\"\"PDF轉檔成EXCEL\n",
        "    1.讀取PDF檔路徑\n",
        "    2.轉出EXCEL路徑\n",
        "    \"\"\"\n",
        "\n",
        "    filename_xlsx = str(pdf_file).replace('pdf', 'xlsx')  # EXCEL檔名 + 輸出路徑\n",
        "    # PDF轉EXCEL\n",
        "    document = ap.Document(pdf_file)\n",
        "    save_xlsx = ap.ExcelSaveOptions()  # Save the file into MS Excel format\n",
        "    document.save(filename_xlsx, save_xlsx)\n",
        "\n",
        "    return\n",
        "\n",
        "'''------------------------執行程式: 讀取檔案、轉檔、判斷整理、輸出、輸出標準檔、確認檔案是否已完成--------------------------------'''\n",
        "\n",
        "# 讀取已完成清單\n",
        "rpa_list_data = pd.read_excel(f\"{main_dir}\\{ini['path']['rpa_list']}\", dtype=str).fillna('')\n",
        "\n",
        "\n",
        "# 最終資料設定:依sheet_name給DataFrame\n",
        "result_data = {}  # key: sheet_name, value:dataframe\n",
        "for sheet_name in kw_dic['sheet_name']['sheet_name'].dropna().values.tolist():\n",
        "    result_data[sheet_name] = pd.DataFrame()\n",
        "\n",
        "\n",
        "fund_count = 0  # 計算已執行家數\n",
        "output_time = 0  # 已執行檔案存檔輸出次數\n",
        "rpa_li = []   # 已經判斷完的資料\n",
        "faile_fund_li = []  # 未成功處理檔案\n",
        "success_fund_li = []  # 成功處理檔案\n",
        "\n",
        "\n",
        "# SQL_table: fund.attr_txcninfo/database:globabl_匯出符合系統日的資料\n",
        "sql = \"\"\"\n",
        "SELECT *\n",
        "  FROM fund.attr_txcninfo\n",
        "  WHERE ann_date >= '2023-07-26'\n",
        "    AND kind = '分红'\n",
        "\"\"\"\n",
        "\n",
        "info_df = pd.read_sql(sql, conn)\n",
        "if info_df.empty == True: # 查無，則放空字串\n",
        "    info_df = None\n",
        "\n",
        "else:\n",
        "    for idx in info_df.index:\n",
        "        # 若RPA_list已有紀錄，不處理\n",
        "        if rpa_list_data.loc[(rpa_list_data['基金碼']==info_df.loc[idx, 'fund_id'])].empty == False:\n",
        "            continue\n",
        "\n",
        "        else:\n",
        "            try:\n",
        "                # 讀取SQL資料，另存pdf檔:link_to_pdf(info_df)\n",
        "                # 把SQL內的link轉成pdf檔，路徑: input file\n",
        "                pdf_url = info_df.loc[idx, 'link']  # SQL內的PDF LINK\n",
        "                pdf_file_nm = str(info_df.loc[idx, 'fund_id']) + '.pdf' # PDF檔名\n",
        "                pdf_file = f\"{input_path}\\\\\" + pdf_file_nm  # PDF檔名 + 輸出路徑\n",
        "                # 轉存成PDF檔(檔名要先在外面存好，函式內只能放str)\n",
        "                urllib.request.urlretrieve(pdf_url, pdf_file)\n",
        "\n",
        "                convert_pdf_to_excel(pdf_file)  # 轉成excel檔\n",
        "            except:\n",
        "                rpa_list_data = rpa_list_data.append(pd.DataFrame([[today, str(info_df.loc[idx, 'fund_id']), pdf_file_nm, '', 'SQL Link轉檔問題']], columns=['執行日期', '基金碼', 'PDF檔', 'RPA', '訊息']))\n",
        "\n",
        "            # 讀取excel檔\n",
        "            excel_file_li = [file_nm for file_nm in glob(f\"{input_path}\\*.xlsx\") if basename(file_nm)[:-5] == basename(pdf_file_nm)[:-4]]  # 找出宇PDF檔名相同的EXCEL檔\n",
        "            excel_file_nm = excel_file_li[0]  # EXCEL檔名\n",
        "            excel_file =  f\"{input_path}\\\\\" + excel_file_nm  # EXCEL檔名 + 輸出路徑\n",
        "\n",
        "            # 處理資料\n",
        "            work = RpaWorker(pdf_file_nm, excel_file_nm)\n",
        "            rpa_li.append(pdf_file_nm)\n",
        "\n",
        "            work.work()\n",
        "            rpa_list_data = rpa_list_data.append(pd.DataFrame([[today, str(info_df.loc[idx, 'fund_id']), pdf_file_nm, 'V', '']], columns=['執行日期', '基金碼', 'PDF檔', 'RPA', '訊息']))\n",
        "\n",
        "            append_fg = False  # 判斷執行輸出合併的flag\n",
        "            for sheet_name in kw_dic['sheet_name']['sheet_name'].dropna().values.tolist():\n",
        "                if sheet_name == work.data['sheet_name']:\n",
        "                    if work.data['data'] is not None:\n",
        "                        append_fg = True  # 判斷已執行輸出合併的flag\n",
        "\n",
        "                    result_data[sheet_name] = pd.concat([result_data[sheet_name], work.data['data']], ignore_index=True)\n",
        "\n",
        "            if append_fg == True:\n",
        "                fund_count += 1  # 已執行基金數+1\n",
        "                success_fund_li.append(work.pdffile)\n",
        "\n",
        "# 輸出資料\n",
        "if result_data != {}:\n",
        "    output_data_file(result_data)\n",
        "\n",
        "\n",
        "# 輸出清單\n",
        "rpa_list_data = rpa_list_data.values.tolist()\n",
        "output_list_file(rpa_list_data)\n",
        "\n",
        "\n",
        "'''------------------------執行程式: 讀取檔案、轉檔、判斷整理、輸出、輸出標準檔、確認檔案是否已完成--------------------------------'''\n",
        "excel_file_li = [file for file in glob(f\"{input_path}\\*.xlsx\") if '~' not in file]\n",
        "\n",
        "excel_file = excel_file_li[14]\n",
        "pdf_file = excel_file.replace('xlsx', 'pdf')\n",
        "work1 = RpaWorker(pdf_file, excel_file)\n",
        "work1.work()\n",
        "temp1 = work1.data\n",
        "\n",
        "\n",
        "excel_file = excel_file_li[8]\n",
        "pdf_file = excel_file.replace('xlsx', 'pdf')\n",
        "work5 = RpaWorker(pdf_file, excel_file)\n",
        "work5.work()\n",
        "temp5 = work5.data  # money\n"
      ]
    }
  ]
}